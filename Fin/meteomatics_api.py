# -*- coding: utf-8 -*-
"""Meteomatics-API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BjHbQp6emHDClDSkttKxWtNTnFYjjhGO
"""

!pip install datetime meteomatics matplotlib cartopy pandas requests numpy

"""# ***Ploting Images directly from saved Images***"""

#Import dependencies

import requests
import matplotlib.pyplot as plt
import os
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import numpy as np
import datetime as dt
import meteomatics.api as api

# Your Meteomatics credentials
username = 'columbiauniversity_patel_apurva'
password = '2Tr0BCHmu6'

# Create a more granular grid for northwest France with 0.1-degree increment
latitude_range = np.arange(47, 51.1, 0.25)
longitude_range = np.arange(-7, 2.1, 0.25)

# Parameters to retrieve
parameters = ['t_2m:C', 'precip_1h:mm', 'wind_speed_10m:ms']

# Model to use
model = 'mix'

# Get start date from user
start_date_str = input("Enter date (YYYY-MM-DD): ")
start_date = dt.datetime.strptime(start_date_str, "%Y-%m-%d")

# Set the time range
end_date = start_date + dt.timedelta(days=1)
interval = dt.timedelta(hours=1)

# Query Meteomatics API for time series data
df = api.query_time_series([(latitude, longitude) for latitude in latitude_range for longitude in longitude_range],
                           start_date, end_date, interval, parameters, username, password, model=model)

# Extracting data from the DataFrame
timestamps = df.index
temperature_data = df['t_2m:C'].rolling(window=3, min_periods=1).mean().values
precipitation_data = df['precip_1h:mm'].rolling(window=3, min_periods=1).mean().values
wind_speed_data = df['wind_speed_10m:ms'].rolling(window=3, min_periods=1).mean().values

# Extracting latitude and longitude from the index
latitudes = [index[0] for index in df.index]
longitudes = [index[1] for index in df.index]

# Plotting using Cartopy
fig, axs = plt.subplots(3, 1, figsize=(10, 15), subplot_kw={'projection': ccrs.PlateCarree()})

# Common map features
for ax in axs:
    ax.add_feature(cfeature.COASTLINE)
    ax.add_feature(cfeature.BORDERS, linestyle=':')
    ax.add_feature(cfeature.LAND, edgecolor='black')
    ax.add_feature(cfeature.LAKES, edgecolor='black')

# Plot temperature
sc1 = axs[0].scatter(longitudes, latitudes, c=temperature_data, cmap='coolwarm', s=200, transform=ccrs.PlateCarree())
axs[0].set_title('Temperature (째C)')

# Plot precipitation
sc2 = axs[1].scatter(longitudes, latitudes, c=precipitation_data, cmap='Blues', s=200, transform=ccrs.PlateCarree())
axs[1].set_title('Precipitation (mm)')

# Plot wind speed
sc3 = axs[2].scatter(longitudes, latitudes, c=wind_speed_data, cmap='viridis', s=200, transform=ccrs.PlateCarree())
axs[2].set_title('Wind Speed (m/s)')

# Add colorbars
plt.colorbar(sc1, ax=axs[0], label='Temperature (째C)')
plt.colorbar(sc2, ax=axs[1], label='Precipitation (mm)')
plt.colorbar(sc3, ax=axs[2], label='Wind Speed (m/s)')

plt.show()

start_date

end_date

df

"""# ***Saving Images from selected Date***"""

# Your Meteomatics credentials
username = 'columbiauniversity_patel_apurva'
password = '2Tr0BCHmu6'

# Create a more granular grid for northwest France with 0.1-degree increment
latitude_range = np.arange(47, 51.1, 0.25)
longitude_range = np.arange(-7, 2.1, 0.25)

# Parameters to retrieve
parameters = ['t_2m:C', 'precip_1h:mm', 'wind_speed_10m:ms']

# Model to use
model = 'mix'

# Get start date from user
start_date_str = input("Enter date (YYYY-MM-DD): ")
start_date = dt.datetime.strptime(start_date_str, "%Y-%m-%d")

# Set the time range
end_date = start_date + dt.timedelta(days=1)
interval = dt.timedelta(hours=1)

# Query Meteomatics API for time series data
df = api.query_time_series([(latitude, longitude) for latitude in latitude_range for longitude in longitude_range],
                           start_date, end_date, interval, parameters, username, password, model=model)

# Extracting data from the DataFrame
timestamps = df.index
temperature_data = df['t_2m:C'].rolling(window=3, min_periods=1).mean().values
precipitation_data = df['precip_1h:mm'].rolling(window=3, min_periods=1).mean().values
wind_speed_data = df['wind_speed_10m:ms'].rolling(window=3, min_periods=1).mean().values

# Extracting latitude and longitude from the index
latitudes = [index[0] for index in df.index]
longitudes = [index[1] for index in df.index]

# Plotting with Cartopy projections and common map features
os.makedirs("predictions", exist_ok=True)

# Plot temperature
fig, ax = plt.subplots(figsize=(10, 7), subplot_kw={'projection': ccrs.PlateCarree()})
ax.add_feature(cfeature.COASTLINE)
ax.add_feature(cfeature.BORDERS, linestyle=':')
ax.add_feature(cfeature.LAND, edgecolor='black')
ax.add_feature(cfeature.LAKES, edgecolor='black')
sc1 = ax.scatter(longitudes, latitudes, c=temperature_data, cmap='coolwarm', s=200, transform=ccrs.PlateCarree())
ax.set_title('Temperature (째C)')
plt.colorbar(sc1, ax=ax, label='Temperature (째C)')
plt.savefig(os.path.join("predictions", "temperature_plot.png"))
plt.clf()

# Plot precipitation
fig, ax = plt.subplots(figsize=(10, 7), subplot_kw={'projection': ccrs.PlateCarree()})
ax.add_feature(cfeature.COASTLINE)
ax.add_feature(cfeature.BORDERS, linestyle=':')
ax.add_feature(cfeature.LAND, edgecolor='black')
ax.add_feature(cfeature.LAKES, edgecolor='black')
sc2 = ax.scatter(longitudes, latitudes, c=precipitation_data, cmap='Blues', s=200, transform=ccrs.PlateCarree())
ax.set_title('Precipitation (mm)')
plt.colorbar(sc2, ax=ax, label='Precipitation (mm)')
plt.savefig(os.path.join("predictions", "precipitation_plot.png"))
plt.clf()

# Plot wind speed
fig, ax = plt.subplots(figsize=(10, 7), subplot_kw={'projection': ccrs.PlateCarree()})
ax.add_feature(cfeature.COASTLINE)
ax.add_feature(cfeature.BORDERS, linestyle=':')
ax.add_feature(cfeature.LAND, edgecolor='black')
ax.add_feature(cfeature.LAKES, edgecolor='black')
sc3 = ax.scatter(longitudes, latitudes, c=wind_speed_data, cmap='viridis', s=200, transform=ccrs.PlateCarree())
ax.set_title('Wind Speed (m/s)')
plt.colorbar(sc3, ax=ax, label='Wind Speed (m/s)')
plt.savefig(os.path.join("predictions", "wind_speed_plot.png"))
plt.clf()

"""# ***Displaying saved images***"""

import os
import matplotlib.pyplot as plt

# Folder containing the saved images
folder_path = "predictions"

# List to store loaded images
loaded_images = []

# Load each image from the folder
for filename in os.listdir(folder_path):
    if filename.endswith(".png"):
        image_path = os.path.join(folder_path, filename)
        loaded_images.append(plt.imread(image_path))

# Display the loaded images in a window
fig, axs = plt.subplots(1, len(loaded_images), figsize=(15, 5))

for i, image in enumerate(loaded_images):
    axs[i].imshow(image)
    axs[i].axis("off")
    # axs[i].set_title(f"Image {i + 1}")

plt.show()

from matplotlib import pyplot as plt
df['wind_speed_10m:ms'].plot(kind='line', figsize=(8, 4), title='wind_speed_10m:ms')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
df['precip_1h:mm'].plot(kind='line', figsize=(8, 4), title='precip_1h:mm')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
df['t_2m:C'].plot(kind='line', figsize=(8, 4), title='t_2m:C')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
df['wind_speed_10m:ms'].plot(kind='hist', bins=20, title='wind_speed_10m:ms')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df['precip_1h:mm'].plot(kind='hist', bins=20, title='precip_1h:mm')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df['t_2m:C'].plot(kind='hist', bins=20, title='t_2m:C')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df.plot(kind='scatter', x='t_2m:C', y='precip_1h:mm', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df.plot(kind='scatter', x='precip_1h:mm', y='wind_speed_10m:ms', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)